
그래프
- 객체들과 객체들 사이의 연결 관계 표현
- 정점들의 집합과 정점을 연결하는 간선들의 집합으로 구성
- |V|개의 정점을 가지는 그래프는 최대 |V| * (|V|-1) /2 개 간선이 가능

** 선형 자료구조나 트리 자료구조로 표현하기 어려운 N:N 관계를 가지는 원소들을 표현하기에 용이!

1. 무향 그래프
- 서로 대칭적인 관계를 연결해서 나타낸 그래프  ( 방향성 X )

2 유향 그래프
- 간선을 화살표로 표현하고 방향성의 개념 포함
- 서로 대칭적이지 않은 관계를 표현
- 기업 간의 공급 관계 , 작업의 선후 관계 등을 표현

3. 가중치 그래프
- 이동하는데 드는 비용을 간선에 부여한 그래프


* 인접!
 - 두 개의 정점에 간선이 존재할 경우 서로 인접해 있다고 함.


완전 그래프 
- 모든 정점들이 서로 인접해 있는 그래프

부분 그래프
- 원래 그래프에서 일부의 정점이나 간선을 제외한 그래프

경로!
- 간선들을 순서대로 나열한 것

단순 경로
 경로 중 한 정점을 최대한 한번만 지나는 경로

사이클 
시작한 정점에서 끝나는 경로

DAG = 사이클이 없는 유향 그래프



** 그래프의 표현 **
1. 인접행렬 = 간선의 유무를 행렬 형태로 표현
  - 인접 행렬의 단점 : 정점의 개수 N이 커지면 인접 행렬에 필요한 메모리 크기는 N^2에 비례해서 커진다.
  - 어떤 인접 정점을 찾을 때마다 모든 슬롯을 찾아봐야 함.
  - 그래프에 포함된 간선의 수가 많지 않을 경우 메모리 사용을 줄이기 위해 간선들의 정보를 나열해서 저장
    ( 간선의 시작 정점과 끝 정점 정보 저장 )

2. 인접 리스트 = 각 정점마다 인접 정점으로 나가는 간선의 정보 저장
  - 각 정점에 대한 인접 정점들을 순차적으로 표현
  - 하나의 정점에 대한 인접 정점들을 각각 노드로 하는 연결 리스트로 저장



** 그래프의 탐색 **
 - 그래프 순회 : 비선형 구조인 그래프로 표현된 모든 자료(정점)을 빠짐없이 탐색
    1. 깊이 우선 탐색 
       1) 시작 정점에서 갈 수 있는 한 방향을 선택해서 다음 정점으로 이동
       2) 선택된 정점에서 다시 1) 과 같은 작업을 반복 수행하면서 갈 수 있는 경로가 있는 곳까지 깊이 탐색!
          ( 이미 방문했던 정점은 재 방문하지 않음 )
       3)  더 이상 갈 곳이 없으면, 가장 최근에 방문한 갈림길이 있는 정점으로 되돌아와서 다른 방향의 정점으로 탐색을 계속 반복하여 결국 모든 정점을 방문하는 순회 방법
       
       SO, 후입선출 구조의 스택을 사용하거나 재귀 호출을 이용해서 구현
   

    2. 너비 우선 탐색
       1) 탐색 시작점의 인접한 정점들을 먼저 모두 차례로 방문
       2) 방문했던 정점들을 다시 시작점으로 하여 위 과정을 반복 수행
       
       
